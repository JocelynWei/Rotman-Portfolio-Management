import pandas as pd
AMZN = pd.read_csv("AMZN.csv")
AMZN.columns
return_month = AMZN.price.pct_change(1)
AMZN["return_month"] = AMZN.price.pct_change(1, fill_method=None)
AMZN["return_month_bi"] = AMZN["return_month"].apply(lambda x: 1 if x > 0 else 0)

from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import AdaBoostClassifier
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.preprocessing import StandardScaler  # normalize data scale
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score # 模型评价-回归
from sklearn.metrics import mean_absolute_error # 模型评价-回归
from sklearn.metrics import confusion_matrix # 模型评价-分类
from sklearn.metrics import accuracy_score # 模型评价-分类

full = AMZN[['pe_ ratio', 'BOOK_VALUE_PER_SHARE', 'return_month_bi']].dropna() # 公司[[特征，特征，目标预测值]].去除所有含NA的
y = full["return_month_bi"].values  # respond y 取值
x = StandardScaler().fit_transform(full[["pe_ ratio", "BOOK_VALUE_PER_SHARE"]].values)  # predictors x 取值 | 标准化

x1, x2, y1, y2 = train_test_split(x, y, test_size = 0.3)  # 划分训练集、测试集 （predictors, respond, test_size)

clf = GradientBoostingClassifier()
clf = clf.fit(x1, y1)

confusion_matrix(y2, clf.predict(x2))  # 混淆矩阵，用模型预测y与真实y对比 TruePos, TrueNeg | FalsePos, FalseNeg
accuracy_score(y2, clf.predict(x2)) # correct classification rate 在二分类中大于0.5，赢！
clf.feature_importances_
clf.predict(x2)  # predict - 简单的return正负预测

